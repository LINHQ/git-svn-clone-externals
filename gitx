#! /usr/bin/env python
#-*- coding: utf-8 -*-

# 整合git跟reviewboard，整合git与svnx，使得不用修改svn hook就能够按照原来的方式提交代码
# 整合跟svn:externals有关的一些脚本:
# .git-svn-clone-externals 在git-svn分支上取得所有的svn:externals CLONE到.git_externals目录并且做好相应的符号链接到正确目录
# .git-svn-branch 创建包含externals的在内的分支
# .git-svn-delete-branch 删除分支，也同时删除externals下的分支
# .git-svn-externals-check 检测externals是否有未comit或者未push到svn服务器的内容
# .git-svn-externals-update 更新所有的externals到SVN最新版本
# .git-svn-merge-branch merge包含externals在内的branch到当前working branch
# .git-svn-switch-branch 切换包含externals在内到分支
# .git-svn-update-all 更新所有的内容到SVN最新版本
# pr post review到review board
# ci commit改变到svn仓库

import os
import sys
import argparse
import inspect
import commands

try:
	import argcomplete
except:
	class argcomplete(object):
		@classmethod
		def autocomplete(*args):
			pass

EXTERNALS_DIR_NAME = ".git_externals"

def DoCommand(command):
	exit_code = os.system(command)
	if exit_code != 0:
		sys.exit(exit_code)
	return exit_code

def DoCommands(*args):
	exit_code = 0
	for command in args:
		exit_code = DoCommand(command)
	return exit_code

# 得到路径对应的git根目录
def GetCurGitDir(path):
	git_dir = ".git"
	abspath = os.path.abspath(path)
	cur_path = abspath
	while True:
		if not os.path.exists(cur_path):
			break
		git_dir_path = os.path.join(cur_path, git_dir)
		if os.path.exists(git_dir_path):
			return cur_path
		cur_path = os.path.abspath(os.path.join(cur_path, os.pardir))
	return None

def GetGitRootDir():
	externals_dir = os.getcwd()
	while os.path.exists(externals_dir):
		name = os.path.join(externals_dir, EXTERNALS_DIR_NAME)
		if os.path.exists(name) and os.path.isdir(name):
			break
		externals_dir = os.path.join(externals_dir, os.path.pardir)
	if not os.path.exists(externals_dir):
		raise RuntimeError("Can't find git externals directory")
	externals_dir = os.path.abspath(externals_dir)
	return externals_dir

def ChdirGitRoot():
	path = GetGitRootDir()
	os.chdir(path)

def _DoFunc(func, gitdir):
	oldcwd = os.getcwd()
	os.chdir(os.path.join(gitdir, os.path.pardir))
	try:
		func()
	finally:
		os.chdir(oldcwd)

def ForEachExternal(func):
	cwd = os.getcwd()
	externals_dir = os.path.join(GetGitRootDir(), EXTERNALS_DIR_NAME)
	os.chdir(externals_dir)
	try:
		gitdirs = commands.getoutput("find * -type d -name .git")
		for gitdir in gitdirs.split("\n"):
			if not os.path.isdir(gitdir):
				continue
			_DoFunc(func, gitdir)
	finally:
		os.chdir(cwd)

def AddArgumentWithIPythonCompleter(parser, *args, **kwargs):
	action = parser.add_argument(*args, **kwargs)
	try:
		import IPython
	except ImportError:
		return
	action.completer = IPython.core.completer.Completer()

def DoCommandInProperPath(command, path, get_path_fail_func = None):
	git_root_path = GetCurGitDir(path)
	if git_root_path is None:
		if get_path_fail_func is not None:
			get_path_fail_func()
		return
	ra_path = os.path.abspath(path).replace(git_root_path + os.path.sep, "")
	cwd = os.getcwd()
	os.chdir(git_root_path)
	try:
		return command(ra_path)
	finally:
		os.chdir(cwd)

class GitxCommand(object):
	@classmethod
	def get_command_name(cls):
		raise RuntimeError

	@classmethod
	def get_description(cls):
		return ""

	@classmethod
	def parse_args(cls, parser):
		pass

	def __init__(self, options, remain_args):
		self.options = options
		remain_args = map(lambda arg : arg if " " not in arg else '"%s"' % arg, remain_args)
		self.remain_args = " ".join(remain_args)

	def run(self):
		return 1

class Clone(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "clone"

	@classmethod
	def get_description(cls):
		return "clone svn and externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("url")
		parser.add_argument("name", nargs="?", default="")

	def get_last_version(self, url):
		return commands.getoutput(
				"svn log -l 2 %s| grep ^r | awk '{print $1}' | sed -n '2,2p' | sed 's/^r//'" % url)

	def run(self):
		url = self.options.url
		if self.options.name != "":
			name = self.options.name
		else:
			splits = url.split("/")
			if len(splits) == 0:
				sys.stderr.write("url %s is not valid\n" % url)
				sys.exit(1)
			name = splits[-1]
		if "-r" not in self.remain_args:
			version = "-r %s:HEAD" % self.get_last_version(url)
		command = "git svn clone %s %s %s %s" % (url, name, self.remain_args, version)
		return DoCommands(command, "cd %s;git-svn-clone-externals" % name)

class CloneExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "clonee"

	@classmethod
	def get_description(cls):
		return "clone externals into .git_externals and link them to proper path"

	def run(self):
		return os.system("git-svn-clone-externals")

class CreateBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "create_branch"

	@classmethod
	def get_description(cls):
		return "create git branch including externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")
		parser.add_argument("-n", "-noswitch", action = "store_true", default = False,
				help = "do not switch to new branch after create")

	def run(self):
		exit_code = os.system("git-svn-branch %s" % self.options.branch_name)
		if exit_code != 0:
			return exit_code
		if self.options.n:
			return 0
		return os.system("git-svn-switch-branch " + self.options.branch_name)

class DeleteBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "delete_branch"

	@classmethod
	def get_description(cls):
		return "delete branch including externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")
		parser.add_argument("-D", action = "store_true", default = False,
				help = "force delete branch")

	def run(self):
		extra = ""
		if self.options.D:
			extra = "-D"
		return os.system("git-svn-delete-branch %s %s" % (self.options.branch_name, extra))

class CheckExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "check_externals"

	@classmethod
	def get_description(cls):
		return "check externals uncommitted or unpushed changes"

	def run(self):
		return os.system("git-svn-externals-check")

class UpdateExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "update_externals"

	@classmethod
	def get_description(cls):
		return "update externals"

	def run(self):
		return os.system("git-svn-externals-update")

class Merge(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "merge"

	@classmethod
	def get_description(cls):
		return "merge branch to this working tree with externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")

	def run(self):
		return os.system("git-svn-merge-branch %s" % self.options.branch_name)

class SwitchBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "switch_branch"

	@classmethod
	def get_description(cls):
		return "switch branch to with externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")

	def run(self):
		return os.system("git-svn-switch-branch %s" % self.options.branch_name)

class Update(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "update"

	@classmethod
	def get_description(cls):
		return "update to svn HEAD"

	def run(self):
		return os.system("git-svn-update-all")

class ShowBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "show_branch"

	@classmethod
	def get_description(cls):
		return "show branch include externals"

	def run(self):
		return os.system("git-svn-show-branch")

class PostReview(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "pr"

	@classmethod
	def get_description(cls):
		return "post changes against svn to review board"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("change_name")

	def run(self):
		return os.system("git-svn-pr postreview " + self.options.change_name)

class Ci(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "ci"

	@classmethod
	def get_description(cls):
		return "ci commited changes to svn"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("change_name")

	def run(self):
		return DoCommands(
				"svnx ci -f " + self.options.change_name,
				"git svn dcommit " + self.remain_args,
				"git-svn-externals-check")

class Checkout(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "checkout"

	@classmethod
	def get_description(cls):
		return "git checkout with doing right with externals"

	@classmethod
	def parse_args(cls, parser):
		AddArgumentWithIPythonCompleter(parser, "path", default = "", nargs = "*")

	def _run_co_branch(self):
		if len(self.options.path) == 0:
			return os.system("git checkout " + self.remain_args)
		if len(self.options.path) != 1:
			return None
		path = self.options.path[0]
		if path == "":
			return os.system("git checkout " + self.remain_args)
		if not os.path.exists(path):
			# may be branch
			return os.system("git checkout " + self.remain_args)
		return None

	def run(self):
		exit_code = self._run_co_branch()
		if exit_code is not None:
			return exit_code
		for path in self.options.path:
			self._co_file(path)
		return 0

	def _co_file(self, path):
		DoCommandInProperPath(
				lambda ra_path : DoCommand("git checkout %s %s" % (ra_path, self.remain_args)),
				path,
				lambda : DoCommand("git checkout %s %s" % (path, self.remain_args)))

class Status(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "stx"

	@classmethod
	def get_description(cls):
		return "git status with check externals status and unpushed content"

	def run(self):
		return DoCommands("git status", "git-svn-check-unpushed", "git-svn-externals-check")

class Stash(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "stash"

	@classmethod
	def get_description(cls):
		return "git do stash with externals"

	def run(self):
		ChdirGitRoot()
		DoCommand("git stash " + self.remain_args)
		def func():
			DoCommand("git stash " + self.remain_args)
		ForEachExternal(func)
		return 0

class Diff(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "diff"

	@classmethod
	def get_description(cls):
		return "diff"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("-na", action = "store_true", default = False,
				help = "do not show git diff with externals")

	def run(self):
		ChdirGitRoot()
		DoCommand("git diff " + self.remain_args)
		if self.options.na:
			return
		def func():
			DoCommand("git diff " + self.remain_args)
		ForEachExternal(func)
		return 0

class Info(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "info"

	@classmethod
	def get_description(cls):
		return "show git svn info"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("-na", action = "store_true", default = False,
				help = "do not show git svn info with externals")

	def run(self):
		DoCommand("git svn info " + self.remain_args)
		if self.options.na:
			return
		ForEachExternal(lambda : DoCommand("git svn info " + self.remain_args))

class Add(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "add"

	@classmethod
	def get_description(cls):
		return "add file contents to index"

	@classmethod
	def parse_args(cls, parser):
		AddArgumentWithIPythonCompleter(parser, "path", default = "", nargs = "*")

	def run(self):
		if len(self.options.path) == 0:
			return DoCommand("git add")
		for path in self.options.path:
			DoCommandInProperPath(
					lambda ra_path : DoCommand("git add %s %s" % (ra_path, self.remain_args)),
					path,
					lambda : DoCommand("git add %s %s" % (path, self.remain_args)))

class Reset(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "reset"

	@classmethod
	def get_description(cls):
		return "Reset current HEAD to the specified state"

	@classmethod
	def parse_args(cls, parser):
		AddArgumentWithIPythonCompleter(parser, "path", default = "", nargs = "*")

	def run(self):
		if len(self.options.path) == 0:
			return DoCommand("git reset")
		for path in self.options.path:
			DoCommandInProperPath(
					lambda ra_path : DoCommand("git reset %s %s" % (ra_path, self.remain_args)),
					path,
					lambda : DoCommand("git reset %s %s" % (path, self.remain_args)))

class Rm(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "rm"

	@classmethod
	def get_description(cls):
		return "Remove files from the working tree and from the index"

	@classmethod
	def parse_args(cls, parser):
		AddArgumentWithIPythonCompleter(parser, "path", default = "", nargs = "*")

	def run(self):
		if len(self.options.path) == 0:
			return DoCommand("git rm")
		for path in self.options.path:
			DoCommandInProperPath(
					lambda ra_path : DoCommand("git rm %s %s" % (ra_path, self.remain_args)),
					path,
					lambda : DoCommand("git rm %s %s" % (path, self.remain_args)))

class Commit(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "commit"

	@classmethod
	def get_description(cls):
		return "Record changes to the repository"

	def run(self):
		ChdirGitRoot()
		DoCommand("git commit " + self.remain_args)
		ForEachExternal(lambda : DoCommand("git commit " + self.remain_args))

def add_command(subparsers, command_cls):
	cname = command_cls.get_command_name()
	desc = command_cls.get_description()
	command_parser = subparsers.add_parser(cname, help = desc)
	command_cls.parse_args(command_parser)
	command_parser.set_defaults(command_cls = command_cls)

def register_all_command(parser):
	mod = sys.modules[__name__]
	subparsers = parser.add_subparsers(help = "sub command helps")
	for obj_name in dir(mod):
		obj = getattr(mod, obj_name)
		if not inspect.isclass(obj) or not issubclass(obj, GitxCommand):
			continue
		if obj is GitxCommand:
			continue
		add_command(subparsers, obj)

def main():
	parser = argparse.ArgumentParser()
	register_all_command(parser)
	argcomplete.autocomplete(parser)
	parse_result, remain_args = parser.parse_known_args()
	command = parse_result.command_cls(parse_result, remain_args)
	return command.run()

if __name__ == "__main__":
	sys.exit(main())

